#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
file_getprop() { grep "^$2=" "$1" | cut -d= -f2; }
if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop /system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
fi;
cleanup() { rm -rf /tmp/anykernel; }
debugging() {
  case $(basename "$ZIPFILE" .zip) in
    *-debugging)
      ui_print " ";
      ui_print "Creating debugging archive in zip directory...";
      $bb tar -czvf "$DIR/anykernel2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
    ;;
  esac;
}
abort() {
  ui_print "$*";
  debugging;
  if [ ! -f /tmp/anykernel/anykernel.sh -o "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  umount /system;
  umount /vendor 2>/dev/null;
  umount /data 2>/dev/null;
  exit 1;
}

show_progress 1.34 4;
ui_print " ";
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIPFILE";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
bb=/tmp/anykernel/tools/busybox;
chmod 755 $bb;
$bb chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;

if [ -f /tmp/anykernel/banner ]; then
  while IFS='' read -r line || $bb [[ -n "$line" ]]; do
    ui_print "$line";
  done < /tmp/anykernel/banner;
  ui_print " ";
  ui_print " ";
fi;

ui_print "$(file_getprop /tmp/anykernel/anykernel.sh kernel.string)";
if [ -f /tmp/anykernel/version ]; then
  ui_print " ";
  ui_print "$(cat /tmp/anykernel/version)";
  ui_print " ";
fi;

sleep 1;

ui_print "  ____   _      _   _____   ____  ";
ui_print " |  __| | |    | | |_   _| |  __| ";
ui_print " | |__  | |    | |   | |   | |__  ";
ui_print " |  __| | |    | |   | |   |  __| ";
ui_print " | |__  | |__  | |   | |   | |__  ";
ui_print " |____| |____| |_|   |_|   |____| ";
sleep 1;
ui_print "  __       ________       __  ";
ui_print "  \ ~~~___|   __   |___~~~ /  ";
ui_print "   _----__|__|  |__|__----_   ";
ui_print "   \~~~~~~|__    __|~~~~~~/   ";
ui_print "    ------\  |  |  /------    ";
ui_print "     \_____\ |__| /_____/     ";
ui_print "            \____/            ";
sleep 0.5;
ui_print " ";
ui_print " ";
ui_print "Installing Elite Kernel for Shamu";
ui_print "By Buckmarble & Brymaster5000";
ui_print " ";
sleep 0.25;
ui_print " ";
ui_print "AnyKernel2 by osm0sis @ xda-developers";
ui_print " ";
ui_print "Mounting System";
ui_print " ";
ui_print " ";
umount /system 2>/dev/null;
umount /vendor 2>/dev/null;
mount -o ro -t auto /system;
mount -o ro -t auto /vendor 2>/dev/null;
mount /data 2>/dev/null;
test -f /system/system/build.prop && root=/system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking device...";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "$testname";
      match=1;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "Unsupported device. Aborting...";
  fi;
fi;

ui_print "Installing kernel...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.system)" == 1 ]; then
  ui_print "Pushing Scripts...";
  mount -o rw,remount -t auto /system;
  if [ -d "$system/su.d" ]
  then  
    cp -rf /tmp/anykernel/system/su.d/* /system/su.d/;
    set_perm_recursive 0 0 0755 0755 /system/su.d;
  else
    mkdir /system/su.d;
    cp -rf /tmp/anykernel/system/su.d/* /system/su.d/;
    set_perm_recursive 0 0 0755 0755 /system/su.d;
  fi;
  mount -o ro,remount -t auto /system;
fi;

debugging;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

umount /system;
umount /vendor 2>/dev/null;
umount /data 2>/dev/null;
ui_print " ";
ui_print " ";
ui_print "Done!";
